[homing_override]
axes: z
set_position_z: 0
gcode:
    SAVE_GCODE_STATE NAME=HOMING_state
    M117 Homing..

    
    G91                            ; relative positioning
    G0 Z10 F540                    ; move up
    G90                            ; absolute positioning

    # Home X and Y only for G28 or G28 XYZ
    {% if 'Z' in params %}
      {% if "x" not in printer.toolhead.homed_axes %}
        G28 X
      {% endif %}
      {% if "y" not in printer.toolhead.homed_axes %}
        G28 Y
      {% endif %}
    {% else %}
      G28 X Y
    {% endif %} 

    ##	XY Location of the Z Endstop Switch
    G0 X200 Y248 F12000            ; move to Z-Pin
    G28 Z                          ; home Z
    G0 Z10 F540                    ; move up

    ## return to org current/acceleration settings
    {% if params.RESET_SETTINGS|default('true') == 'true' %}
      _SET_Z_CURRENT
      _SET_ACC
    {% endif %}

    RESTORE_GCODE_STATE NAME=HOMING_state


[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    _CG28 RESET_SETTINGS=false
    M117 Z-Calibration..
    SECURE_ATTACH_PROBE
    BASE_CALIBRATE_Z
    SECURE_DOCK_PROBE
    M117



[gcode_macro G32]
gcode:
    G28
    Z_TILT_ADJUST
    
    ##	Uncommentfor your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    G0 X125 Y125 Z30 F3600
    
    #--------------------------------------------------------------------
[gcode_macro Z_TILT_ADJUST]
rename_existing: BASE_Z_TILT_ADJUST
gcode:
    M117 ZTA..
    G28
    _CG28 RESET_SETTINGS=false
    # reduce accel current
  
    SECURE_ATTACH_PROBE
    BASE_Z_TILT_ADJUST
    SECURE_DOCK_PROBE
    
    M117 ZTA Finished.



[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
variable_parameter_EXTRUDER_TEMP: 190
variable_parameter_BED_TEMP: 60
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:


    {% if not printer.z_tilt.applied %}
        M117 Z Tilt adjusting...
        Z_TILT_ADJUST
        
    {% endif %}
    G28 Z
    #BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    CALIBRATE_Z
    G1 Z20 F3000                   ; move nozzle away from bed 
    G1 X125 Y125 F5000

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X125 Y240 F3600            ; park nozzle at rear
    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F6000
  
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  ##TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT  

[gcode_macro SECURE_ATTACH_PROBE]
gcode:
    QUERY_PROBE
    _PROBE_ACTION action=attach
    _CHECK_PROBE action=check_attach

# docking the probe if not already docked
[gcode_macro SECURE_DOCK_PROBE]
gcode:
    QUERY_PROBE
    _PROBE_ACTION action=dock
    _CHECK_PROBE action=check_dock


[gcode_macro _CHECK_PROBE]
variable_probe_state: 0
gcode:
    QUERY_PROBE
    _PROBE_ACTION action={ ACTION }

[gcode_macro _PROBE_ACTION]
  
gcode:
  {% set state = not printer.probe.last_query %}
  SET_GCODE_VARIABLE MACRO=_CHECK_PROBE VARIABLE=probe_state VALUE={ state }

  # attach/dock probe
  {% if not state and params.ACTION == 'attach' %}
    _ATTACH_PROBE
  {% endif %}
  {% if state and params.ACTION == 'dock' %}
    _DOCK_PROBE
  {% endif %}

  # check if probe fails to attach/detach
  {% if state and params.ACTION == 'check_dock' %}
    { action_raise_error("Probe dock failed!") }
  {% endif %}
  {% if not state and params.ACTION == 'check_attach' %}
    { action_raise_error("Probe attach failed!") }
  {% endif %}

# this attaching from above is more silent but would
# be dangerous if the probe is already attached!
#[gcode_macro _ATTACH_PROBE]
#gcode:
#    SAVE_GCODE_STATE NAME=_ATTACH_PROBE
#    SET_GCODE_OFFSET Z=0.0         ; reset offset - will be restored
#    G90                            ; absolute positioning
#    G0 X252.5 Y300 Z10 F12000      ; move to mag-probe
#    G0 Z0.0 F540                   ; move down to mag-probe
#    G0 Y285 F6000                  ; move out
#    G0 Z10 F540                    ; move up
#    RESTORE_GCODE_STATE NAME=_ATTACH_PROBE

[gcode_macro _ATTACH_PROBE]
gcode:
    SAVE_GCODE_STATE NAME=_ATTACH_PROBE
    SET_GCODE_OFFSET Z=0.0        ; reset offset - will be restored
    G90   
    G0 Z30  F600                ; absolute positioning
    G0 X10 Y236 F6000          ; move to mag-probe
    G0 Y250 F4000                 ; move in
    G0 Y236 F4000                 ; move out
    RESTORE_GCODE_STATE NAME=_ATTACH_PROBE

[gcode_macro _DOCK_PROBE]
gcode:
    SAVE_GCODE_STATE NAME=_DOCK_PROBE
    SET_GCODE_OFFSET Z=0.0        ; reset offset - will be restored
    G90                           ;absolute positioning
    G0 Z30 F540                   ;move to Z
    G0 X9.8 Y230 F12000             ; move to mag-probe
    G0 Y250 F5000                 ; move in
    G0 X45 F4000                  ; move right
    G0 Y236 F4000                   ; move back
    RESTORE_GCODE_STATE NAME=_DOCK_PROBE

[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    #store current nozzle location
    #SAVE_GCODE_STATE NAME=original_nozzle_location
    SECURE_ATTACH_PROBE
    PARKCENTER Z={printer.configfile.settings.z_tilt_adjust.horizontal_move_z}
    _PROBE_ACCURACY {% for p in params 
            %}{'%s=%s' % (p, params[p])}{% 
           endfor %}
    SECURE_DOCK_PROBE
    #restore current nozzle location
    #RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute
[gcode_macro BED_MESH_CALIBRATE]
rename_existing:             _BED_MESH_CALIBRATE
gcode:
    
    CheckProbe action=query
    SECURE_ATTACH_PROBE

    _BED_MESH_CALIBRATE 

    SECURE_DOCK_PROBE


#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
#variable_parameter_AREA_START : 0,0
#variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
#variable_mesh_area_offset : 5.0
; number of sample per probe point
#variable_probe_samples : 2
; minimum and maximum probe count
#variable_min_probe_count : 4
; scale up the probe count, the vlaue should be 1.0 ~ < max/min probe count
#variable_probe_count_scale_factor : 1.0
#gcode:
    # CheckProbe action=query
    # SECURE_ATTACH_PROBE
    # {% if params.AREA_START and params.AREA_END %}
    #     {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    #     {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
    #     {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
    #     {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
    #     {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

    #     {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	# 	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	# 	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	# 	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

    #     {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
    #     {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}

    #     {% set meshMaxPointX = meshPointX %}
	#     {% set meshMaxPointY = meshPointY %}


    #     {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
    #         {% if area_min_x - mesh_area_offset >=  safe_min_x %}
    #             {% set area_min_x = area_min_x - mesh_area_offset %}
    #         {% else %}
    #             {% set area_min_x = safe_min_x %}
    #         {% endif %}

    #         {% if area_min_y - mesh_area_offset >=  safe_min_y %}
    #             {% set area_min_y = area_min_y - mesh_area_offset %}
    #         {% else %}
    #             {% set area_min_y = safe_min_y %}
    #         {% endif %}

    #         {% if area_max_x + mesh_area_offset <=  safe_max_x %}
    #             {% set area_max_x = area_max_x + mesh_area_offset %}
    #         {% else %}
    #             {% set area_max_x = safe_max_x %}
    #         {% endif %}

    #         {% if area_max_y + mesh_area_offset <=  safe_max_y %}
    #             {% set area_max_y = area_max_y + mesh_area_offset %}
    #         {% else %}
    #             {% set area_max_y = safe_max_y %}
    #         {% endif %}

    #         PRINT MSG="Set custom mesh area to ({area_min_x},{area_min_y}),({area_max_x},{area_max_y})" OUTPUT_TARGET=1

    #         {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x)  * probe_count_scale_factor|float)|round(0)|int %}
    #         {% if meshPointX < min_probe_count %}
    #             {% set meshPointX = min_probe_count %}
    #         {% endif %}
    #         {% if meshPointX > meshMaxPointX %}
    #             {% set meshPointX = meshMaxPointX %}
    #         {% endif %}

    #         {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor|float)|round(0)|int %}
    #         {% if meshPointY < min_probe_count %}
    #             {% set meshPointY = min_probe_count %}
    #         {% endif %}
    #         {% if meshPointY > meshMaxPointY %}
    #             {% set meshPointY = meshMaxPointY %}
    #         {% endif %}

    #         PRINT MSG="Set custom mesh matrix to {meshPointX}x{meshPointY}" OUTPUT_TARGET=1
    #         PRINT MSG="Mesh: {meshPointX}x{meshPointY}" OUTPUT_TARGET=2

    #         {% if meshPointX >=4 and meshPointY >=4 %}
    #             BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
    #         {% else %}
    #             BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm="lagrange"
    #         {% endif %}

    #     {% else %}
    #         PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
    #         PRINT MSG="Mesh: default" OUTPUT_TARGET=2
    #         BED_MESH_CALIBRATE_BASE
    #     {% endif %}
    # {% else %}
    #     PRINT MSG="Invalid custom mesh parameters, probe using default setting" OUTPUT_TARGET=1
    #     PRINT MSG="Mesh: default" OUTPUT_TARGET=2
    #     BED_MESH_CALIBRATE_BASE
    # {% endif %}
    # SECURE_DOCK_PROBE
[gcode_macro DISABLE_XY_MOTOR]
gcode:
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0


[gcode_macro PRINT]
variable_parameter_MSG : ''
variable_parameter_OUTPUT_TARGET : 0
gcode:
    {% if params.OUTPUT_TARGET|default(0)|int == 0 %}
        M117 {params.MSG | string}
        { action_respond_info((params.MSG) | string)}
    {% elif params.OUTPUT_TARGET|default(0)|int == 1 %}
        { action_respond_info((params.MSG) | string)}
    {% else %}
         M117 {params.MSG | string}
    {% endif %}